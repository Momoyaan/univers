/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as AboutImport } from "./routes/about";
import { Route as AppRouteImport } from "./routes/app/route";
import { Route as IndexImport } from "./routes/index";
import { Route as AppDashboardImport } from "./routes/app/dashboard";
import { Route as AppCalendarImport } from "./routes/app/calendar";
import { Route as authVerifyEmailImport } from "./routes/(auth)/verify-email";
import { Route as authRegisterImport } from "./routes/(auth)/register";
import { Route as authLoginImport } from "./routes/(auth)/login";
import { Route as authForgotPasswordImport } from "./routes/(auth)/forgot-password";
import { Route as AppSettingsRouteImport } from "./routes/app/settings/route";
import { Route as AppSettingsWorkspacesImport } from "./routes/app/settings/workspaces";
import { Route as AppSettingsTeamImport } from "./routes/app/settings/team";
import { Route as AppSettingsProfileImport } from "./routes/app/settings/profile";
import { Route as AppSettingsNotificationsImport } from "./routes/app/settings/notifications";
import { Route as AppSettingsIntegrationsImport } from "./routes/app/settings/integrations";
import { Route as AppSettingsAccountImport } from "./routes/app/settings/account";

// Create/Update Routes

const AboutRoute = AboutImport.update({
    id: "/about",
    path: "/about",
    getParentRoute: () => rootRoute,
} as any);

const AppRouteRoute = AppRouteImport.update({
    id: "/app",
    path: "/app",
    getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => rootRoute,
} as any);

const AppDashboardRoute = AppDashboardImport.update({
    id: "/dashboard",
    path: "/dashboard",
    getParentRoute: () => AppRouteRoute,
} as any);

const AppCalendarRoute = AppCalendarImport.update({
    id: "/calendar",
    path: "/calendar",
    getParentRoute: () => AppRouteRoute,
} as any);

const authVerifyEmailRoute = authVerifyEmailImport.update({
    id: "/(auth)/verify-email",
    path: "/verify-email",
    getParentRoute: () => rootRoute,
} as any);

const authRegisterRoute = authRegisterImport.update({
    id: "/(auth)/register",
    path: "/register",
    getParentRoute: () => rootRoute,
} as any);

const authLoginRoute = authLoginImport.update({
    id: "/(auth)/login",
    path: "/login",
    getParentRoute: () => rootRoute,
} as any);

const authForgotPasswordRoute = authForgotPasswordImport.update({
    id: "/(auth)/forgot-password",
    path: "/forgot-password",
    getParentRoute: () => rootRoute,
} as any);

const AppSettingsRouteRoute = AppSettingsRouteImport.update({
    id: "/settings",
    path: "/settings",
    getParentRoute: () => AppRouteRoute,
} as any);

const AppSettingsWorkspacesRoute = AppSettingsWorkspacesImport.update({
    id: "/workspaces",
    path: "/workspaces",
    getParentRoute: () => AppSettingsRouteRoute,
} as any);

const AppSettingsTeamRoute = AppSettingsTeamImport.update({
    id: "/team",
    path: "/team",
    getParentRoute: () => AppSettingsRouteRoute,
} as any);

const AppSettingsProfileRoute = AppSettingsProfileImport.update({
    id: "/profile",
    path: "/profile",
    getParentRoute: () => AppSettingsRouteRoute,
} as any);

const AppSettingsNotificationsRoute = AppSettingsNotificationsImport.update({
    id: "/notifications",
    path: "/notifications",
    getParentRoute: () => AppSettingsRouteRoute,
} as any);

const AppSettingsIntegrationsRoute = AppSettingsIntegrationsImport.update({
    id: "/integrations",
    path: "/integrations",
    getParentRoute: () => AppSettingsRouteRoute,
} as any);

const AppSettingsAccountRoute = AppSettingsAccountImport.update({
    id: "/account",
    path: "/account",
    getParentRoute: () => AppSettingsRouteRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
    interface FileRoutesByPath {
        "/": {
            id: "/";
            path: "/";
            fullPath: "/";
            preLoaderRoute: typeof IndexImport;
            parentRoute: typeof rootRoute;
        };
        "/app": {
            id: "/app";
            path: "/app";
            fullPath: "/app";
            preLoaderRoute: typeof AppRouteImport;
            parentRoute: typeof rootRoute;
        };
        "/about": {
            id: "/about";
            path: "/about";
            fullPath: "/about";
            preLoaderRoute: typeof AboutImport;
            parentRoute: typeof rootRoute;
        };
        "/app/settings": {
            id: "/app/settings";
            path: "/settings";
            fullPath: "/app/settings";
            preLoaderRoute: typeof AppSettingsRouteImport;
            parentRoute: typeof AppRouteImport;
        };
        "/(auth)/forgot-password": {
            id: "/(auth)/forgot-password";
            path: "/forgot-password";
            fullPath: "/forgot-password";
            preLoaderRoute: typeof authForgotPasswordImport;
            parentRoute: typeof rootRoute;
        };
        "/(auth)/login": {
            id: "/(auth)/login";
            path: "/login";
            fullPath: "/login";
            preLoaderRoute: typeof authLoginImport;
            parentRoute: typeof rootRoute;
        };
        "/(auth)/register": {
            id: "/(auth)/register";
            path: "/register";
            fullPath: "/register";
            preLoaderRoute: typeof authRegisterImport;
            parentRoute: typeof rootRoute;
        };
        "/(auth)/verify-email": {
            id: "/(auth)/verify-email";
            path: "/verify-email";
            fullPath: "/verify-email";
            preLoaderRoute: typeof authVerifyEmailImport;
            parentRoute: typeof rootRoute;
        };
        "/app/calendar": {
            id: "/app/calendar";
            path: "/calendar";
            fullPath: "/app/calendar";
            preLoaderRoute: typeof AppCalendarImport;
            parentRoute: typeof AppRouteImport;
        };
        "/app/dashboard": {
            id: "/app/dashboard";
            path: "/dashboard";
            fullPath: "/app/dashboard";
            preLoaderRoute: typeof AppDashboardImport;
            parentRoute: typeof AppRouteImport;
        };
        "/app/settings/account": {
            id: "/app/settings/account";
            path: "/account";
            fullPath: "/app/settings/account";
            preLoaderRoute: typeof AppSettingsAccountImport;
            parentRoute: typeof AppSettingsRouteImport;
        };
        "/app/settings/integrations": {
            id: "/app/settings/integrations";
            path: "/integrations";
            fullPath: "/app/settings/integrations";
            preLoaderRoute: typeof AppSettingsIntegrationsImport;
            parentRoute: typeof AppSettingsRouteImport;
        };
        "/app/settings/notifications": {
            id: "/app/settings/notifications";
            path: "/notifications";
            fullPath: "/app/settings/notifications";
            preLoaderRoute: typeof AppSettingsNotificationsImport;
            parentRoute: typeof AppSettingsRouteImport;
        };
        "/app/settings/profile": {
            id: "/app/settings/profile";
            path: "/profile";
            fullPath: "/app/settings/profile";
            preLoaderRoute: typeof AppSettingsProfileImport;
            parentRoute: typeof AppSettingsRouteImport;
        };
        "/app/settings/team": {
            id: "/app/settings/team";
            path: "/team";
            fullPath: "/app/settings/team";
            preLoaderRoute: typeof AppSettingsTeamImport;
            parentRoute: typeof AppSettingsRouteImport;
        };
        "/app/settings/workspaces": {
            id: "/app/settings/workspaces";
            path: "/workspaces";
            fullPath: "/app/settings/workspaces";
            preLoaderRoute: typeof AppSettingsWorkspacesImport;
            parentRoute: typeof AppSettingsRouteImport;
        };
    }
}

// Create and export the route tree

interface AppSettingsRouteRouteChildren {
    AppSettingsAccountRoute: typeof AppSettingsAccountRoute;
    AppSettingsIntegrationsRoute: typeof AppSettingsIntegrationsRoute;
    AppSettingsNotificationsRoute: typeof AppSettingsNotificationsRoute;
    AppSettingsProfileRoute: typeof AppSettingsProfileRoute;
    AppSettingsTeamRoute: typeof AppSettingsTeamRoute;
    AppSettingsWorkspacesRoute: typeof AppSettingsWorkspacesRoute;
}

const AppSettingsRouteRouteChildren: AppSettingsRouteRouteChildren = {
    AppSettingsAccountRoute: AppSettingsAccountRoute,
    AppSettingsIntegrationsRoute: AppSettingsIntegrationsRoute,
    AppSettingsNotificationsRoute: AppSettingsNotificationsRoute,
    AppSettingsProfileRoute: AppSettingsProfileRoute,
    AppSettingsTeamRoute: AppSettingsTeamRoute,
    AppSettingsWorkspacesRoute: AppSettingsWorkspacesRoute,
};

const AppSettingsRouteRouteWithChildren =
    AppSettingsRouteRoute._addFileChildren(AppSettingsRouteRouteChildren);

interface AppRouteRouteChildren {
    AppSettingsRouteRoute: typeof AppSettingsRouteRouteWithChildren;
    AppCalendarRoute: typeof AppCalendarRoute;
    AppDashboardRoute: typeof AppDashboardRoute;
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
    AppSettingsRouteRoute: AppSettingsRouteRouteWithChildren,
    AppCalendarRoute: AppCalendarRoute,
    AppDashboardRoute: AppDashboardRoute,
};

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
    AppRouteRouteChildren,
);

export interface FileRoutesByFullPath {
    "/": typeof IndexRoute;
    "/app": typeof AppRouteRouteWithChildren;
    "/about": typeof AboutRoute;
    "/app/settings": typeof AppSettingsRouteRouteWithChildren;
    "/forgot-password": typeof authForgotPasswordRoute;
    "/login": typeof authLoginRoute;
    "/register": typeof authRegisterRoute;
    "/verify-email": typeof authVerifyEmailRoute;
    "/app/calendar": typeof AppCalendarRoute;
    "/app/dashboard": typeof AppDashboardRoute;
    "/app/settings/account": typeof AppSettingsAccountRoute;
    "/app/settings/integrations": typeof AppSettingsIntegrationsRoute;
    "/app/settings/notifications": typeof AppSettingsNotificationsRoute;
    "/app/settings/profile": typeof AppSettingsProfileRoute;
    "/app/settings/team": typeof AppSettingsTeamRoute;
    "/app/settings/workspaces": typeof AppSettingsWorkspacesRoute;
}

export interface FileRoutesByTo {
    "/": typeof IndexRoute;
    "/app": typeof AppRouteRouteWithChildren;
    "/about": typeof AboutRoute;
    "/app/settings": typeof AppSettingsRouteRouteWithChildren;
    "/forgot-password": typeof authForgotPasswordRoute;
    "/login": typeof authLoginRoute;
    "/register": typeof authRegisterRoute;
    "/verify-email": typeof authVerifyEmailRoute;
    "/app/calendar": typeof AppCalendarRoute;
    "/app/dashboard": typeof AppDashboardRoute;
    "/app/settings/account": typeof AppSettingsAccountRoute;
    "/app/settings/integrations": typeof AppSettingsIntegrationsRoute;
    "/app/settings/notifications": typeof AppSettingsNotificationsRoute;
    "/app/settings/profile": typeof AppSettingsProfileRoute;
    "/app/settings/team": typeof AppSettingsTeamRoute;
    "/app/settings/workspaces": typeof AppSettingsWorkspacesRoute;
}

export interface FileRoutesById {
    __root__: typeof rootRoute;
    "/": typeof IndexRoute;
    "/app": typeof AppRouteRouteWithChildren;
    "/about": typeof AboutRoute;
    "/app/settings": typeof AppSettingsRouteRouteWithChildren;
    "/(auth)/forgot-password": typeof authForgotPasswordRoute;
    "/(auth)/login": typeof authLoginRoute;
    "/(auth)/register": typeof authRegisterRoute;
    "/(auth)/verify-email": typeof authVerifyEmailRoute;
    "/app/calendar": typeof AppCalendarRoute;
    "/app/dashboard": typeof AppDashboardRoute;
    "/app/settings/account": typeof AppSettingsAccountRoute;
    "/app/settings/integrations": typeof AppSettingsIntegrationsRoute;
    "/app/settings/notifications": typeof AppSettingsNotificationsRoute;
    "/app/settings/profile": typeof AppSettingsProfileRoute;
    "/app/settings/team": typeof AppSettingsTeamRoute;
    "/app/settings/workspaces": typeof AppSettingsWorkspacesRoute;
}

export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath;
    fullPaths:
        | "/"
        | "/app"
        | "/about"
        | "/app/settings"
        | "/forgot-password"
        | "/login"
        | "/register"
        | "/verify-email"
        | "/app/calendar"
        | "/app/dashboard"
        | "/app/settings/account"
        | "/app/settings/integrations"
        | "/app/settings/notifications"
        | "/app/settings/profile"
        | "/app/settings/team"
        | "/app/settings/workspaces";
    fileRoutesByTo: FileRoutesByTo;
    to:
        | "/"
        | "/app"
        | "/about"
        | "/app/settings"
        | "/forgot-password"
        | "/login"
        | "/register"
        | "/verify-email"
        | "/app/calendar"
        | "/app/dashboard"
        | "/app/settings/account"
        | "/app/settings/integrations"
        | "/app/settings/notifications"
        | "/app/settings/profile"
        | "/app/settings/team"
        | "/app/settings/workspaces";
    id:
        | "__root__"
        | "/"
        | "/app"
        | "/about"
        | "/app/settings"
        | "/(auth)/forgot-password"
        | "/(auth)/login"
        | "/(auth)/register"
        | "/(auth)/verify-email"
        | "/app/calendar"
        | "/app/dashboard"
        | "/app/settings/account"
        | "/app/settings/integrations"
        | "/app/settings/notifications"
        | "/app/settings/profile"
        | "/app/settings/team"
        | "/app/settings/workspaces";
    fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
    IndexRoute: typeof IndexRoute;
    AppRouteRoute: typeof AppRouteRouteWithChildren;
    AboutRoute: typeof AboutRoute;
    authForgotPasswordRoute: typeof authForgotPasswordRoute;
    authLoginRoute: typeof authLoginRoute;
    authRegisterRoute: typeof authRegisterRoute;
    authVerifyEmailRoute: typeof authVerifyEmailRoute;
}

const rootRouteChildren: RootRouteChildren = {
    IndexRoute: IndexRoute,
    AppRouteRoute: AppRouteRouteWithChildren,
    AboutRoute: AboutRoute,
    authForgotPasswordRoute: authForgotPasswordRoute,
    authLoginRoute: authLoginRoute,
    authRegisterRoute: authRegisterRoute,
    authVerifyEmailRoute: authVerifyEmailRoute,
};

export const routeTree = rootRoute
    ._addFileChildren(rootRouteChildren)
    ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app",
        "/about",
        "/(auth)/forgot-password",
        "/(auth)/login",
        "/(auth)/register",
        "/(auth)/verify-email"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/app": {
      "filePath": "app/route.tsx",
      "children": [
        "/app/settings",
        "/app/calendar",
        "/app/dashboard"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/app/settings": {
      "filePath": "app/settings/route.tsx",
      "parent": "/app",
      "children": [
        "/app/settings/account",
        "/app/settings/integrations",
        "/app/settings/notifications",
        "/app/settings/profile",
        "/app/settings/team",
        "/app/settings/workspaces"
      ]
    },
    "/(auth)/forgot-password": {
      "filePath": "(auth)/forgot-password.tsx"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.tsx"
    },
    "/(auth)/verify-email": {
      "filePath": "(auth)/verify-email.tsx"
    },
    "/app/calendar": {
      "filePath": "app/calendar.tsx",
      "parent": "/app"
    },
    "/app/dashboard": {
      "filePath": "app/dashboard.tsx",
      "parent": "/app"
    },
    "/app/settings/account": {
      "filePath": "app/settings/account.tsx",
      "parent": "/app/settings"
    },
    "/app/settings/integrations": {
      "filePath": "app/settings/integrations.tsx",
      "parent": "/app/settings"
    },
    "/app/settings/notifications": {
      "filePath": "app/settings/notifications.tsx",
      "parent": "/app/settings"
    },
    "/app/settings/profile": {
      "filePath": "app/settings/profile.tsx",
      "parent": "/app/settings"
    },
    "/app/settings/team": {
      "filePath": "app/settings/team.tsx",
      "parent": "/app/settings"
    },
    "/app/settings/workspaces": {
      "filePath": "app/settings/workspaces.tsx",
      "parent": "/app/settings"
    }
  }
}
ROUTE_MANIFEST_END */
